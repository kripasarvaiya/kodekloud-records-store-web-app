name: Secure Release Pipeline

on:
  push:
    branches:
      - main

# ðŸ‘‡ Uncomment to apply least privilege permissions
# permissions:
#   contents: read  
#   packages: write  
#   id-token: write  

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install -r src/requirements.txt

      # ðŸ‘‡ Uncomment this step in "Secret Management Best Practices" 
      # - name: Run security audit (pip-audit)
      #   run: |
      #     source venv/bin/activate
      #     pip install pip-audit
      #     pip-audit --strict

      - name: Run tests
        run: |
          source venv/bin/activate
        # pytest tests/

  docker-build:
    needs: build-and-test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # ðŸ‘‡ Uncomment in "Generating and Validating an SBOM" 
      # - name: Generate SBOM
      #   run: |
      #     curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh
      #     syft . -o cyclonedx-json > sbom.json

      # ðŸ‘‡ Uncomment to store SBOM artifact
      # - name: Upload SBOM
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: sbom
      #     path: sbom.json

      - name: Get version from Git tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      # ðŸ‘‡ Replace with secure authentication using GitHub Secrets
      # - name: Log in to GitHub Container Registry
      #   run: echo "${{ secrets.REGISTRY_PAT }}" | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin

      - name: Build and tag Docker image
        run: |
          docker build -t ghcr.io/${{ github.repository }}/kodekloud-record-store-api:${{ env.VERSION }} .
          docker tag ghcr.io/${{ github.repository }}/kodekloud-record-store-api:${{ env.VERSION }} ghcr.io/${{ github.repository }}/kodekloud-record-store-api:latest

      # ðŸ‘‡ Uncomment in "Supply Chain Security" 
      # - name: Scan for vulnerabilities (Grype)
      #   run: |
      #     curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh
      #     grype ghcr.io/${{ github.repository }}/kodekloud-record-store-api:${{ env.VERSION }} --fail-on high

      - name: Push Docker image
        run: |
          docker push ghcr.io/${{ github.repository }}/kodekloud-record-store-api:${{ env.VERSION }}
          docker push ghcr.io/${{ github.repository }}/kodekloud-record-store-api:latest

  deploy-dev:
    needs: docker-build
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to Dev
        run: |
          echo "Deploying image ghcr.io/${{ github.repository }}/kodekloud-record-store-api:${{ github.sha }} to Dev"
          # Replace this with actual deployment command to your dev environment

      - name: Run post-deployment health check in Dev
        run: |
          echo "Checking health of Dev environment..."
          curl -f http://your-dev-service-url/health || exit 1

  deploy-prod:
    needs: deploy-dev  
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to Production
        run: |
          echo "Deploying image ghcr.io/${{ github.repository }}/kodekloud-record-store-api:${{ github.sha }} to Production"
          # Replace this with actual deployment command to your production environment

      - name: Run post-deployment health check in Production
        run: |
          echo "Checking health of Production..."
          curl -f http://your-prod-service-url/health || exit 1

      # ðŸ‘‡ Uncomment in "Rollback on Failure" 
      # - name: Rollback if deployment fails
      #   if: failure()
      #   run: |
      #     echo "Rolling back to previous version..."
      #     docker pull ghcr.io/${{ github.repository }}/kodekloud-record-store-api:latest
      #     # Deploy the last known good version
